{"version":3,"sources":["components/SearchBar.js","api/unsplash.js","components/ImageCard.js","components/ImageList.js","components/App.js","index.js"],"names":["SearchBar","state","term","onFormSubmit","event","preventDefault","props","onSubmit","className","style","backgroundColor","this","paddingLeft","marginTop","marginBottom","fontSize","auth","type","fontFamily","value","onChange","e","setState","target","React","Component","axios","create","baseURL","headers","Authorization","ImageCard","setSpans","height","ImageRef","current","clientHeight","spans","Math","ceil","createRef","addEventListener","images","description","urls","gridRowEnd","ref","alt","src","regular","ImageList","map","image","id","App","img","onSearchSubmit","a","unsplash","get","params","query","response","data","results","ReactDom","render","document","querySelector"],"mappings":"gQA0EeA,E,4MA5BXC,MAAQ,CAAEC,KAAM,I,EAKhBC,aAAe,SAACC,GACZA,EAAMC,iBAEN,EAAKC,MAAMC,SAAS,EAAKN,MAAMC,O,qDAG5BI,GAAQ,IAAD,OACV,OACI,qBAAKE,UAAU,aAAaC,MAAO,CAAEC,gBAAiB,OAAtD,SACI,sBAAMH,SAAUI,KAAKR,aAAcK,UAAU,UAA7C,SACI,sBAAKA,UAAU,QAAQC,MAAO,CAAEC,gBAAiB,UAAjD,UACI,uBAAOD,MAAO,CAAEG,YAAa,MAAOC,UAAW,MAAOC,aAAc,MAAMC,SAAU,QAApF,SAA+FJ,KAAKL,MAAMU,OAE1G,uBAAOC,KAAK,OAAOR,MAAO,CAAES,WAAY,cAAeC,MAAOR,KAAKV,MAAMC,KACrEkB,SAAU,SAACC,GAAD,OAAO,EAAKC,SAClB,CAAEpB,KAAMmB,EAAEE,OAAOJ,sB,GA7BzBK,IAAMC,W,QCzBfC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,2BACTC,QAAS,CACLC,cACI,2DCkBGC,E,kDA7BX,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IAYV0B,SAAW,WACP,IAAMC,EAAS,EAAKC,SAASC,QAAQC,aAC/BC,EAAQC,KAAKC,KAAKN,EAAS,IACjC,EAAKX,SAAS,CAAEe,WAbhB,EAAKpC,MAAQ,CAAEoC,MAAO,GAEtB,EAAKH,SAAWV,IAAMgB,YALR,E,gEAUd7B,KAAKuB,SAASC,QAAQM,iBAAiB,OAAQ9B,KAAKqB,Y,+BAS/C,IAAD,EACwBrB,KAAKL,MAAMoC,OAAhCC,EADH,EACGA,YAAaC,EADhB,EACgBA,KACpB,OACA,qBAAKnC,MAAQ,CAAEoC,WAAW,QAAD,OAAUlC,KAAKV,MAAMoC,QAA9C,SACI,qBAAKS,IAAKnC,KAAKuB,SAAUa,IAAKJ,EAAaK,IAAKJ,EAAKK,gB,GAxBzCzB,IAAMC,WCSfyB,G,MAPG,SAAC5C,GACf,IAAMoC,EAASpC,EAAMoC,OAAOS,KAAI,SAACC,GAC7B,OAAO,cAAC,EAAD,CAA0BV,OAAQU,GAAlBA,EAAMC,OAEjC,OAAO,qBAAK7C,UAAU,aAAf,SAA6BkC,MCoBzBY,E,4MAtBXrD,MAAQ,CAACsD,IAAK,I,EAIdC,e,uCAAiB,WAAOtD,GAAP,eAAAuD,EAAA,sEAEQC,EAASC,IAAI,iBAAkB,CAChDC,OAAQ,CAAEC,MAAO3D,KAHR,OAET4D,EAFS,OAKb,EAAKxC,SAAS,CAAEiC,IAAKO,EAASC,KAAKC,UALtB,2C,6GASb,OACI,sBAAKxD,UAAU,eAAeC,MAAO,CAAEI,UAAW,QAAlD,UACI,cAAC,EAAD,CAAWN,SAAWI,KAAK6C,eAAiBxC,KAAK,iBACjD,cAAC,EAAD,CAAW0B,OAAQ/B,KAAKV,MAAMsD,a,GAnB5B/B,IAAMC,W,MCAxBwC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.89e8acd6.chunk.js","sourcesContent":["//purpose is to create a searchbar\r\n\r\n//son't ever completely copy the codes ol, \r\n//there maybe some errors look for it make your own changes\r\n\r\n//anytime the user changes the input\r\n//there is usually only one 1 property inside event object\r\n\r\n//inthis on is usually used\r\n//on the name of element we will assign this function to \r\n//and then the event we are watching for\r\n//name doesn't matter much so you can put any name here.\r\n\r\n//onInputChange(event) {console.log(event.target.value);}\r\n\r\n//onClick={this.onInputClick}\r\n//onInputClick(){console.log('the input is clicked');}\r\n\r\n//onSubmit={this.onInputSubmit} \r\n//onInputSubmit(){console.log('the input is submited');}\r\n\r\n//in the oncleck metod inside input the oninputchange is a function \r\n//in this if you put() after inputchange it will auto matically called whenever you render\r\n//we don't want to call it when the inputchange is rendered \r\n//instead we want to call it at some point in future\r\n\r\n//simply we don't put () everytime we call a callback function in an event handler like onchange\r\n\r\n//onchange is a special property name\r\n//different name needs different property names\r\n//since we want to check everytime user changes the input we use onchange\r\n//onclick is for when user clicks\r\n//onSubmit is for when user submits the form\r\n\r\nimport React from 'react';\r\n\r\n//we are using Class component because we need to use state in this\r\nclass SearchBar extends React.Component {\r\n    //using sate means using controlled elements.\r\n\r\n    /*constructor(){\r\n        super();\r\n        this.onFormSubmit = this.onFormSubmit.bind(this);\r\n    }*/\r\n\r\n\r\n    state = { term: '' };\r\n\r\n    //this is short form syntax for\r\n    //onFormSubmit: funtion(event){...}\r\n    //use this method most if not all the time\r\n    onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        //console.log(this.state.term);\r\n        this.props.onSubmit(this.state.term);\r\n    }\r\n\r\n    render(props) {\r\n        return (\r\n            <div className='ui segment' style={{ backgroundColor: 'red' }}>\r\n                <form onSubmit={this.onFormSubmit} className='ui form'>\r\n                    <div className='field' style={{ backgroundColor: 'orange' }} >\r\n                        <label style={{ paddingLeft: '41%', marginTop: '2px', marginBottom: '2px',fontSize: '18px' }}>{this.props.auth}\r\n                        </label>\r\n                        <input type='text' style={{ fontFamily: 'sans-serif'}} value={this.state.term}\r\n                            onChange={(e) => this.setState(\r\n                                { term: e.target.value })} />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default SearchBar;\r\n\r\n    //onFormSubmit(event){event.preventDefault();console.log(this.state.term);}\r\n    //3rd way inside the form tag onSubmit= {(e) => this.onFormSubmit(e)}\r\n    //whenever we use => dunction inside element we need to use ()at the end to invoke it.\r\n\r\n\r\n    //e = event\r\n\r\n    //we need to stop the form tags default refreshing problem and to do this we use\r\n    //onFormSubmit(event){event.preventDefault();}\r\n\r\n    //toUpperCase is used to forcefully capitalise the input\r\n    //<input type='text' value={this.state.term} onChange={(e) => this.setState({term: e.target.value.toUpperCase()})}/> \r\n\r\n    //onchange is called when user inputs text\r\n    //we update state by calling the function inside that event object that is e.target.value that term will contain whatever user typed into it \r\n    //component re-renders when the user types something\r\n    //value prop is omething which will will show whatever is inside it. it will override the other text input.\r\n\r\n/*alternate way to write the event handler\r\n<input type='text' onChange={(e) => console.log(e.target.value)}/>\r\n<input type='text' onChange={(event) => console.log(event.target.value)}/>\r\nthis method is used when we need to define the code in single line\r\n */\r\n\r\n/*uncontrolled elements\r\nonInputChange(event) {\r\n    console.log(event.target.value);\r\n}\r\n<input type='text' onChange={this.onInputChange}/>\r\n\r\nonFormSubmit(event){event.preventDefault();console.log(this.state.term);}\r\nthe reason for state error in console.log is because there is no value to the\r\ninformsubmit object\r\nthe react can only call onformsumit as it is using this means adding a undefined value to it\r\n2nd reason =>\r\nthat is when we call onformsubmit there is no this.onformsubmit\r\nthat is at some point when the form actually call onformsubmit\r\nit rips that function off of that object or whatever object it shows up\r\nit shows up as indide form element and calls that function on its own\r\nthat is onformsubmit not this.onformsubmit\r\nso when the function is invoked the value of this inside of is equal to undefined\r\n*/\r\n\r\n\r\n","//goal is to put some amount of code that contains related to axios\r\n\r\n//this is the best method and should be used when needed in other apps\r\n\r\n//import React from 'react';\r\nimport axios from 'axios';\r\n\r\n//we can sharten the code by using const searchimg=(term)=>{ contain the respective code}\r\n\r\n//create methode is going to create a instance of axios client with acouple defaulted properties \r\n//like params, await, header, etc\r\n\r\nexport default axios.create({ \r\n    baseURL: 'https://api.unsplash.com',\r\n    headers: {\r\n        Authorization: \r\n            'Client-ID nl3HFoKOggBkv1vwoBPp0fjf8NqrZq7K1TKdn3c86vk'\r\n    }\r\n})","//purpose is to show one image by itself as a starter.\r\n\r\nimport React from 'react';\r\n\r\nclass ImageCard extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = { spans: 0 };\r\n\r\n        this.ImageRef = React.createRef();\r\n        //this is the way to create a ref\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.ImageRef.current.addEventListener('load', this.setSpans);\r\n    } \r\n\r\n    setSpans = () => {\r\n        const height = this.ImageRef.current.clientHeight;\r\n        const spans = Math.ceil(height / 10);\r\n        this.setState({ spans });\r\n    }\r\n\r\n    render(){\r\n        const {description, urls} = this.props.images;\r\n        return (\r\n        <div style= {{ gridRowEnd: `span ${this.state.spans}` }}>\r\n            <img ref={this.ImageRef} alt={description} src={urls.regular} />\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageCard;\r\n\r\n\r\n/*\r\n<img \r\n    alt={this.props.images.description} \r\n    src={this.props.images.urls.regular}\r\n/>\r\n\r\n const {description, urls} = this.props.images;\r\n        return (<div>\r\n            <img alt={description} src={urls.regular} />\r\n        </div>);\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.ImageRef = React.createRef();\r\n        //this is the way to create a ref\r\n    }\r\n\r\n    componentDidMount() {console.log(this.ImageRef);}  \r\n    \r\n\r\n    //in case componentDidMount() {console.log(this.ImageRef.current.clientHeight);}\r\n    //doesn't work we use the syntax below\r\n\r\n    componentDidMount() {\r\n        this.ImageRef.current.addEventListener('load', this.setSpan);\r\n    } \r\n    setSpan = () => {\r\n        console.log(this.ImageRef.current.clientHeight);\r\n    }\r\n\r\n    this.setState({ span: span});\r\n\r\n    render(){\r\n        const {description, urls} = this.props.images;\r\n        return (<div>\r\n            <img ref={this.ImageRef} alt={description} src={urls.regular} />\r\n        </div>);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.ImageRef.current.addEventListener('load', this.setSpans);\r\n    } \r\n*/ ","//inside here we willl put a liitle bit of mark up for a functional component\r\n\r\nimport React from 'react';\r\nimport ImageCard from './ImageCard';\r\nimport './ImageList.css';\r\n\r\nconst ImageList = (props) => {\r\n    const images = props.images.map((image) => { \r\n        return <ImageCard key={image.id} images={image}/> \r\n    });\r\n    return <div className=\"image-list\">{images}</div>;\r\n};\r\n\r\nexport default ImageList;\r\n\r\n//map images from image list component\r\n//we want it to somehow return theimg tag that has the appropriate src.\r\n//props.images.map((image) => {return <img src=\"\" /> })\r\n\r\n//to sprcify the url for the image we want to show on the screen we will reference\r\n//return props.images.map((image) => {return <img src={image.urls.regular} /> });\r\n\r\n//adding keys to the component\r\n//const images = props.images.map((image) => {return <div key={image.id}> \r\n//< img src={image.urls.regular} /> </div>});\r\n\r\n//adding alt tag\r\n//const images = props.images.map((image) => {\r\n    //return <img alt={image.description} key={image.id} \r\n    //src={image.urls.regular} />});\r\n\r\n/*  const ImageList = (props) => {\r\n        const images = props.images.map(({ description, id, urls }) => { \r\n            return <img alt={description} key={id} src={urls.regular} /> \r\n    }); };\r\n\r\n\r\n*/\r\n","import React from \"react\";\r\nimport SearchBar from './SearchBar';\r\nimport unsplash from '../api/unsplash';\r\nimport ImageList from './ImageList';\r\n\r\nclass App extends React.Component {\r\n\r\n    //[] is for array. if we feel that the response is an array we will put an array to the state\r\n    state = {img: []};\r\n\r\n    //alt method of calling notification\r\n\r\n    onSearchSubmit = async (term) => {\r\n\r\n      const response = await unsplash.get('/search/photos', {\r\n            params: { query: term }\r\n        });\r\n        this.setState({ img: response.data.results});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='ui container' style={{ marginTop: '10px' }}>\r\n                <SearchBar onSubmit={ this.onSearchSubmit } auth='Image Search' />\r\n                <ImageList images={this.state.img} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n//<SearchBar onSubmit={this.onSearchSubmit} />\r\n//you can change onsuvbmit to any names run grand whatever you want\r\n//just we can to do that whenever we pass on a prop as a callback to normal jsx element\r\n\r\n//app components takes the state.term from searchbar and is responsible\r\n//for making an API request and somehow getting a list of images\r\n\r\n//get request with axios\r\n//get will have 2 args.\r\n//1 will be the address we are going to make request to\r\n//2nd one will be an object that will ahve a bunch of options that will customise this request\r\n//we have to get the root url to make a request first and then we can enter search/photos\r\n//axios.get('', { });\r\n\r\n//we can also use this for authorization\r\n//axios.get('https://api.unsplash.com/search/photos/?client_id=access key', {});\r\n//this is the access key nl3HFoKOggBkv1vwoBPp0fjf8NqrZq7K1TKdn3c86vk\r\n\r\n\r\n/* to check whether this axios.get('https://api.unsplash.com/search/photos', {\r\n            params: {query: term },\r\n            headers: {\r\n                Authorization: 'Client-ID nl3HFoKOggBkv1vwoBPp0fjf8NqrZq7K1TKdn3c86vk'\r\n            }\r\n        });\r\n    is working\r\n    open inspect, click on networks, clear evrything, type the text,\r\n    then check the XHR to see whethere there is any reponse\r\n\r\n\r\n    this here is the request to get the data which can only be seen in network inspect\r\n    axios.get('https://api.unsplash.com/search/photos', {\r\n            params: {query: term },\r\n            headers: {\r\n                Authorization: 'Client-ID nl3HFoKOggBkv1vwoBPp0fjf8NqrZq7K1TKdn3c86vk'\r\n            }\r\n    });\r\n\r\n    now we will try to get the data from this request and show it on screen\r\n    first lets try get the no. of images we get from the result of get request\r\n\r\n    this is the one method of getting notification\r\n    axios.get('https://api.unsplash.com/search/photos', {\r\n            params: {query: term },\r\n            headers: {\r\n                Authorization: 'Client-ID nl3HFoKOggBkv1vwoBPp0fjf8NqrZq7K1TKdn3c86vk'\r\n            }\r\n    }).then((response) => {\r\n        console.log(response.data.results);\r\n    })\r\n\r\n    now that we get the response we set it on the componnent state so \r\n    that we can print out the numbers for now our goal is the images\r\n\r\n    alt method of solving this error\r\n    constructor(){\r\n        super();\r\n        this.onSearchSubmit = this.onSearchSubmit.bind(this);\r\n    }\r\n\r\n    one method\r\n\r\n    onSearchSubmit = async (term) => {\r\n         const response = await axios.get('https://api.unsplash.com/search/photos', {\r\n            params: { query: term },\r\n            headers: {\r\n                Authorization: 'Client-ID nl3HFoKOggBkv1vwoBPp0fjf8NqrZq7K1TKdn3c86vk'\r\n            }\r\n        });\r\n        console.log(response.data.results);\r\n        this.setState({ img: response.data.results});\r\n    }\r\n\r\n    <div className='ui container' style={{ marginTop: '10px' }}>\r\n                <SearchBar onSubmit={ this.onSearchSubmit } auth='Image Search' />\r\n                found: {this.state.img.length} img\r\n            </div>\r\n\r\n    <ImageList images={this.state.img} />\r\n    dont forget to add a space before the /> if not you will get an error\r\n    \r\n*/","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './components/App';\r\nimport './components/index.css';\r\n\r\nReactDom.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}